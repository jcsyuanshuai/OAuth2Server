// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package token

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServiceClient interface {
	Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*TokenItem, error)
	Authorize(ctx context.Context, in *AuthorizeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Code(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*TokenItem, error)
	PasswordCredential(ctx context.Context, in *PasswordCredentialReq, opts ...grpc.CallOption) (*TokenItem, error)
	ClientCredential(ctx context.Context, in *ClientCredentialReq, opts ...grpc.CallOption) (*TokenItem, error)
	Implicit(ctx context.Context, in *AuthorizationCodeReq, opts ...grpc.CallOption) (*TokenItem, error)
	AuthorizationCode(ctx context.Context, in *AuthorizationCodeReq, opts ...grpc.CallOption) (*TokenItem, error)
}

type tokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServiceClient(cc grpc.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*TokenItem, error) {
	out := new(TokenItem)
	err := c.cc.Invoke(ctx, "/token.TokenService/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Authorize(ctx context.Context, in *AuthorizeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/token.TokenService/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Code(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*TokenItem, error) {
	out := new(TokenItem)
	err := c.cc.Invoke(ctx, "/token.TokenService/Code", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) PasswordCredential(ctx context.Context, in *PasswordCredentialReq, opts ...grpc.CallOption) (*TokenItem, error) {
	out := new(TokenItem)
	err := c.cc.Invoke(ctx, "/token.TokenService/PasswordCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) ClientCredential(ctx context.Context, in *ClientCredentialReq, opts ...grpc.CallOption) (*TokenItem, error) {
	out := new(TokenItem)
	err := c.cc.Invoke(ctx, "/token.TokenService/ClientCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Implicit(ctx context.Context, in *AuthorizationCodeReq, opts ...grpc.CallOption) (*TokenItem, error) {
	out := new(TokenItem)
	err := c.cc.Invoke(ctx, "/token.TokenService/Implicit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) AuthorizationCode(ctx context.Context, in *AuthorizationCodeReq, opts ...grpc.CallOption) (*TokenItem, error) {
	out := new(TokenItem)
	err := c.cc.Invoke(ctx, "/token.TokenService/AuthorizationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
// All implementations must embed UnimplementedTokenServiceServer
// for forward compatibility
type TokenServiceServer interface {
	Refresh(context.Context, *RefreshReq) (*TokenItem, error)
	Authorize(context.Context, *AuthorizeReq) (*emptypb.Empty, error)
	Code(context.Context, *CodeReq) (*TokenItem, error)
	PasswordCredential(context.Context, *PasswordCredentialReq) (*TokenItem, error)
	ClientCredential(context.Context, *ClientCredentialReq) (*TokenItem, error)
	Implicit(context.Context, *AuthorizationCodeReq) (*TokenItem, error)
	AuthorizationCode(context.Context, *AuthorizationCodeReq) (*TokenItem, error)
	mustEmbedUnimplementedTokenServiceServer()
}

// UnimplementedTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (UnimplementedTokenServiceServer) Refresh(context.Context, *RefreshReq) (*TokenItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedTokenServiceServer) Authorize(context.Context, *AuthorizeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedTokenServiceServer) Code(context.Context, *CodeReq) (*TokenItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Code not implemented")
}
func (UnimplementedTokenServiceServer) PasswordCredential(context.Context, *PasswordCredentialReq) (*TokenItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordCredential not implemented")
}
func (UnimplementedTokenServiceServer) ClientCredential(context.Context, *ClientCredentialReq) (*TokenItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientCredential not implemented")
}
func (UnimplementedTokenServiceServer) Implicit(context.Context, *AuthorizationCodeReq) (*TokenItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Implicit not implemented")
}
func (UnimplementedTokenServiceServer) AuthorizationCode(context.Context, *AuthorizationCodeReq) (*TokenItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizationCode not implemented")
}
func (UnimplementedTokenServiceServer) mustEmbedUnimplementedTokenServiceServer() {}

// UnsafeTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServiceServer will
// result in compilation errors.
type UnsafeTokenServiceServer interface {
	mustEmbedUnimplementedTokenServiceServer()
}

func RegisterTokenServiceServer(s grpc.ServiceRegistrar, srv TokenServiceServer) {
	s.RegisterService(&TokenService_ServiceDesc, srv)
}

func _TokenService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.TokenService/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Refresh(ctx, req.(*RefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.TokenService/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Authorize(ctx, req.(*AuthorizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Code_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Code(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.TokenService/Code",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Code(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_PasswordCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).PasswordCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.TokenService/PasswordCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).PasswordCredential(ctx, req.(*PasswordCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_ClientCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).ClientCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.TokenService/ClientCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).ClientCredential(ctx, req.(*ClientCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Implicit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Implicit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.TokenService/Implicit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Implicit(ctx, req.(*AuthorizationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_AuthorizationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).AuthorizationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.TokenService/AuthorizationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).AuthorizationCode(ctx, req.(*AuthorizationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenService_ServiceDesc is the grpc.ServiceDesc for TokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "token.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Refresh",
			Handler:    _TokenService_Refresh_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _TokenService_Authorize_Handler,
		},
		{
			MethodName: "Code",
			Handler:    _TokenService_Code_Handler,
		},
		{
			MethodName: "PasswordCredential",
			Handler:    _TokenService_PasswordCredential_Handler,
		},
		{
			MethodName: "ClientCredential",
			Handler:    _TokenService_ClientCredential_Handler,
		},
		{
			MethodName: "Implicit",
			Handler:    _TokenService_Implicit_Handler,
		},
		{
			MethodName: "AuthorizationCode",
			Handler:    _TokenService_AuthorizationCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token.proto",
}
