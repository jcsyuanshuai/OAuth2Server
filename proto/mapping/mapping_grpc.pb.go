// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MappingServiceClient is the client API for MappingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MappingServiceClient interface {
	Create(ctx context.Context, in *MappingUserRole, opts ...grpc.CallOption) (*MappingUserRole, error)
	Delete(ctx context.Context, in *MappingUserRole, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindByUserId(ctx context.Context, in *FindByUserIdReq, opts ...grpc.CallOption) (*ListRequest, error)
	FindByRoleId(ctx context.Context, in *FindByRoleIdReq, opts ...grpc.CallOption) (*ListRequest, error)
}

type mappingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMappingServiceClient(cc grpc.ClientConnInterface) MappingServiceClient {
	return &mappingServiceClient{cc}
}

func (c *mappingServiceClient) Create(ctx context.Context, in *MappingUserRole, opts ...grpc.CallOption) (*MappingUserRole, error) {
	out := new(MappingUserRole)
	err := c.cc.Invoke(ctx, "/mapping.MappingService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) Delete(ctx context.Context, in *MappingUserRole, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mapping.MappingService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) FindByUserId(ctx context.Context, in *FindByUserIdReq, opts ...grpc.CallOption) (*ListRequest, error) {
	out := new(ListRequest)
	err := c.cc.Invoke(ctx, "/mapping.MappingService/FindByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) FindByRoleId(ctx context.Context, in *FindByRoleIdReq, opts ...grpc.CallOption) (*ListRequest, error) {
	out := new(ListRequest)
	err := c.cc.Invoke(ctx, "/mapping.MappingService/FindByRoleId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MappingServiceServer is the server API for MappingService service.
// All implementations must embed UnimplementedMappingServiceServer
// for forward compatibility
type MappingServiceServer interface {
	Create(context.Context, *MappingUserRole) (*MappingUserRole, error)
	Delete(context.Context, *MappingUserRole) (*emptypb.Empty, error)
	FindByUserId(context.Context, *FindByUserIdReq) (*ListRequest, error)
	FindByRoleId(context.Context, *FindByRoleIdReq) (*ListRequest, error)
	mustEmbedUnimplementedMappingServiceServer()
}

// UnimplementedMappingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMappingServiceServer struct {
}

func (UnimplementedMappingServiceServer) Create(context.Context, *MappingUserRole) (*MappingUserRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMappingServiceServer) Delete(context.Context, *MappingUserRole) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMappingServiceServer) FindByUserId(context.Context, *FindByUserIdReq) (*ListRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUserId not implemented")
}
func (UnimplementedMappingServiceServer) FindByRoleId(context.Context, *FindByRoleIdReq) (*ListRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByRoleId not implemented")
}
func (UnimplementedMappingServiceServer) mustEmbedUnimplementedMappingServiceServer() {}

// UnsafeMappingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MappingServiceServer will
// result in compilation errors.
type UnsafeMappingServiceServer interface {
	mustEmbedUnimplementedMappingServiceServer()
}

func RegisterMappingServiceServer(s grpc.ServiceRegistrar, srv MappingServiceServer) {
	s.RegisterService(&MappingService_ServiceDesc, srv)
}

func _MappingService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MappingUserRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapping.MappingService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).Create(ctx, req.(*MappingUserRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MappingUserRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapping.MappingService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).Delete(ctx, req.(*MappingUserRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_FindByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).FindByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapping.MappingService/FindByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).FindByUserId(ctx, req.(*FindByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_FindByRoleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByRoleIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).FindByRoleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapping.MappingService/FindByRoleId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).FindByRoleId(ctx, req.(*FindByRoleIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MappingService_ServiceDesc is the grpc.ServiceDesc for MappingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MappingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mapping.MappingService",
	HandlerType: (*MappingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MappingService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MappingService_Delete_Handler,
		},
		{
			MethodName: "FindByUserId",
			Handler:    _MappingService_FindByUserId_Handler,
		},
		{
			MethodName: "FindByRoleId",
			Handler:    _MappingService_FindByRoleId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapping.proto",
}
